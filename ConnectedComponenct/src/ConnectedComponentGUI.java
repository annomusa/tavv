
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import javax.swing.ImageIcon;
import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.MatOfRect;
import org.opencv.core.Point;
import org.opencv.core.Size;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;
import org.opencv.imgproc.Imgproc;
import org.opencv.imgcodecs.Imgcodecs;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Raffi
 */
public final class ConnectedComponentGUI extends javax.swing.JFrame {
    static { System.loadLibrary(Core.NATIVE_LIBRARY_NAME); }
    /**
     * Creates new form ConnectedComponentGUI
     */
    public ConnectedComponentGUI() {
        initComponents();
        
        Mat m = Imgcodecs.imread("D:\\anno\\TA\\data test\\1.jpg",Imgcodecs.CV_LOAD_IMAGE_GRAYSCALE);
        Mat m2 = new Mat();
        Mat label1 = new Mat();
        Imgproc.threshold(m, m2, 0, 255, Imgproc.THRESH_OTSU);
        int a = Imgproc.connectedComponents(m2, label1);
//        jLabel1.setIcon(new ImageIcon(toBufferedImage(m2)));
        System.out.println(a);
        System.out.println(label1.dump());
        
        Mat label2 = new Mat();
        Mat stats = new Mat();
        Mat centroid = new Mat();
        
        int jlhObj = Imgproc.connectedComponentsWithStats(m2, label2, stats, centroid);
        double Obj[][] = new double[jlhObj][8];
        System.out.println(jlhObj);
        System.out.println(label2.dump());
        System.out.println(stats.dump()); // lft, top, widht, height, area
        System.out.println(centroid.dump());
        
        System.out.println("bud");
        System.out.println(centroid.type());
        
        
        
        
        Imgproc.rectangle(m2, new Point(3,43), new Point(9,48), new Scalar(0, 255, 255), 2);
        jLabel1.setIcon(new ImageIcon(toBufferedImage(m2)));
        
        Mat mColor = Imgcodecs.imread("D:\\anno\\TA\\imagemalam2\\cawang1.jpg",Imgcodecs.CV_LOAD_IMAGE_COLOR);
        Imgproc.rectangle(mColor, new Point(3,43), new Point(9,48), new Scalar(0, 255, 255), 1);
        jLabel2.setIcon(new ImageIcon(toBufferedImage(mColor)));
//        MatOfRect m2Color = new MatOfRect(mColor);
//        System.out.println(m2Color.dump());
        
   }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            } 
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConnectedComponentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConnectedComponentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConnectedComponentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConnectedComponentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConnectedComponentGUI().setVisible(true);
            }
        });
    }
    
    public Image toBufferedImage(Mat m){
        int type = BufferedImage.TYPE_BYTE_GRAY;
        if ( m.channels() > 1 ) {
            type = BufferedImage.TYPE_3BYTE_BGR;
        }
        int bufferSize = m.channels()*m.cols()*m.rows();
        byte [] b = new byte[bufferSize];
        m.get(0,0,b); // get all the pixels
        
        BufferedImage image = new BufferedImage(m.cols(),m.rows(), type);
        final byte[] targetPixels = ((DataBufferByte) image.getRaster().getDataBuffer()).getData();
        System.arraycopy(b, 0, targetPixels, 0, b.length);
        return image;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
